<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Faye | 博客]]></title>
  <link href="http://gonjay.github.io/blog/categories/faye/atom.xml" rel="self"/>
  <link href="http://gonjay.github.io/"/>
  <updated>2014-11-18T23:04:08+08:00</updated>
  <id>http://gonjay.github.io/</id>
  <author>
    <name><![CDATA[GonJay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android客户端接收来自Faye的消息推送]]></title>
    <link href="http://gonjay.github.io/blog/2014/03/03/android-receive-message-from-ruby-china-org/"/>
    <updated>2014-03-03T21:53:50+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/03/03/android-receive-message-from-ruby-china-org</id>
    <content type="html"><![CDATA[<h3>基本原理</h3>

<p>先看了railscasts的<a href="http://railscasts.com/episodes/260-messaging-with-faye">260 Messaging with Faye</a>部分，了解Faye的基本原理。</p>

<p>按照其教程发现有一个关于thin的bug，谷歌之解决，后来发现rubychina应该也是遇到过类似的问题。</p>

<p>解决的方法是加上<code>Faye::WebSocket.load_adapter('thin')</code>
<code>ruby
require 'faye'
Faye::WebSocket.load_adapter('thin')
faye_server = Faye::RackAdapter.new(:mount =&gt; '/faye', :timeout =&gt; 45)
run faye_server
</code>
当然，理论上来说，Faye是支持各种web服务器的，这个地方因为和Rails比较紧密所以选用Faye，如果考虑到更高的并发的话，选择Node.js来跑也是不错的，faye也是有Node的版本的。</p>

<h3>实现</h3>

<p>在实现了web端之后，就考虑到移植到安卓客户端</p>

<p>谷歌android faye，发现有人已经做了一个安卓端的fayeclient，根据websocket的协议来，实现一个并不困难。</p>

<p>对比faye客户端的js代码
<code>javascript
    $(function() {
      var faye = new Faye.Client('http://localhost:9292/faye');
      faye.subscribe('/messages/new', function (data) {
      alert(data);
      });
    });
</code>
和<a href="https://github.com/saulpower/Android-Faye-Client">Android-Faye-Client</a>的java代码
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nl">ws:</span><span class="c1">//%s:443/events&amp;rdquo;, baseUrl));</span>
</span><span class='line'><span class="n">String</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;/%</span><span class="n">s</span><span class="o">/**&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">User</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">().</span><span class="na">getUserId</span><span class="o">());&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FayeClient</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">channel</span><span class="o">);</span>
</span><span class='line'><span class="n">mClient</span><span class="o">.</span><span class="na">setFayeListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">mClient</span><span class="o">.</span><span class="na">connectToServer</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>  <br/>
我们就知道大概了如何实现了，需要指出的是，js客户端直接用的http协议，而我们在java这边需要用的是ws协议(也即WebSocket，wss类似https，是ws的安全加强版)</p>

<p>如果你使用的是Android Studio，在你的<code>build.gradle</code>里面添加如下依赖即可:</p>

<pre><code>dependencies {
    compile 'com.saulpower.fayeclient:library:1.0'
}
</code></pre>

<p>因为这个应用是基于Ruby-China做得的，端口号可以查看<a href="view-source:http://ruby-china.org/">RubyChina首页</a>的源代码获取。而channel号也在首页源代码中可见，用的一个temp_access_token，这个token是专门用来做faye的channel号的，通过第一个版本的api可以获取到这个token。
<code>html
    &lt;script type="text/javascript" data-turbolinks-eval=false&gt;
      ROOT_URL = "http://ruby-china.org/";
      ASSET_URL = "http://l.ruby-china.org/";
      FAYE_SERVER_URL = "http://ruby-china.org:8080/faye";
        CURRENT_USER_ACCESS_TOKEN = "72a47853462c91db8f7ed8d3d8899d00";
      if (FAYE_SERVER_URL) {
        App.initNotificationSubscribe();
      }
    &lt;/script&gt;
</code>
在<a href="https://github.com/gonjay/rubychina4android">RubyChina4Android</a>中，用户登录的时候会获取一遍temp_access_token，并注册Serveice。接下来，如果有人在论坛里面@你，应该就能在手机上收到消息推送了。</p>

<h2>Source Code</h2>

<p>以上所有的代码都可以在<a href="https://github.com/gonjay/rubychina4android">RubyChina4Android</a>里面找到</p>
]]></content>
  </entry>
  
</feed>
