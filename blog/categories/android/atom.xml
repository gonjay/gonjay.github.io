<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 博客]]></title>
  <link href="http://gonjay.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://gonjay.github.io/"/>
  <updated>2014-11-18T23:04:08+08:00</updated>
  <id>http://gonjay.github.io/</id>
  <author>
    <name><![CDATA[GonJay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android与Cocos2d-x开发中的缓存池]]></title>
    <link href="http://gonjay.github.io/blog/2014/10/14/androidyu-cocos2d-xkai-fa-zhong-de-huan-cun-chi/"/>
    <updated>2014-10-14T22:27:53+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/10/14/androidyu-cocos2d-xkai-fa-zhong-de-huan-cun-chi</id>
    <content type="html"><![CDATA[<p>缓存就像写作业前，把相关的资料和工具摆到桌面上一样，这样会比真正要用到的时候再去取要方便。生活中这样的例子挺多的，在软件领域，实现缓存机制的地方笔者接触到了两个非常类似的，一个是Android开发中，使用ListView的Adapter，渲染每个item时用到的ViewHoder，另外一个是Cocos2d-x开发游戏时，缓存的怪物对象。</p>

<!--more-->


<h2>Android</h2>

<p>Android中ListView渲染item时，需要在每个item里面创建view。当屏幕向上滚动的时候，新的item会从底部出现，此时需要创建新的view来显示新的数据，与此同时，屏幕顶部消失的item中的view会被回收掉，这样当然没有任何问题，可是如果涉及到大量item需要显示，<strong>在快速滚动屏幕的时候</strong>，就需要非常频繁的创建view对象并销毁不用的view对象，对内存的消耗非常大，而且何必呢？其实每个item的view都是类似的，不同的只是数据，我们并不需要对view做频繁的创建与销毁操作，只用将新的数据绑定到不再使用的view上面就可以，然后把穿上新衣服的view出现在用户的屏幕上。</p>

<p>有点像电影的里面一人饰演多个角色，从屏幕上消失了一会儿，换了个造型又出来演。缓存池也是这么个意思。</p>

<h2>Cocos2d-x</h2>

<p>游戏开发中，有时候会有大量的怪物从屏幕上消失（死亡）或者出现（复活、刷新），当然不可能每个怪都是new出来的，很多时候只是设置了一下参数，就让怪物从屏幕上不可见（死亡）或者出现（刷新）。内存中真正存储的怪物对象可能就只有10个左右，但是给用户的感受就是会有源源不断的怪物在被杀死后再出现了。</p>

<p>现在突然想想，杀死游戏中怪物的时候只是干掉了一些数值（生命值），刷新出来的怪物在内存里面都是同样一段地址呢。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio 开发中的Tips]]></title>
    <link href="http://gonjay.github.io/blog/2014/07/11/android-studio-kai-fa-zhong-de-tips/"/>
    <updated>2014-07-11T11:42:59+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/07/11/android-studio-kai-fa-zhong-de-tips</id>
    <content type="html"><![CDATA[<p>入门Android时使用的一直是Eclipse，后来就转用Android Studio了，最近因为需要返回使用Eclipse，突然发现在编译打包一个apk的时候，Eclipse居然比Android Studio要快上不少！！</p>

<p>Android Studio build 速度太慢，这个太不科学了，google一下发现了以下解决方案：</p>

<h4>使用最新的Android gradle plugin</h4>

<pre><code>build.gradle

    buildscript {
           dependencies {
                      classpath 'com.android.tools.build:gradle:0.9.+'       
                  }    
              }
</code></pre>

<h4>使用最新的Gradle</h4>

<p>gradle-wrapper.properties
distributionUrl=http://services.gradle.org/distributions/gradle-1.8-all.zip</p>

<h4>使用gradle deamon 后台任务，使用gradle parallel并行任务</h4>

<pre><code>gradle.properties

org.gradle.daemon=true    
org.gradle.parallel=true
</code></pre>

<p>开启deamon后，CPU起来了，这样就对了嘛，用机器时间减少人等待的时间，提高生产效率</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Face Detection Based on AndroidSDK]]></title>
    <link href="http://gonjay.github.io/blog/2014/03/06/face-detection-based-on-androidsdk/"/>
    <updated>2014-03-06T23:43:35+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/03/06/face-detection-based-on-androidsdk</id>
    <content type="html"><![CDATA[<h1>流程</h1>

<ul>
<li>读取一张图片生成Bitmap对象</li>
<li>用FaceDetector分析Bitmap，获取图片中的人脸数组</li>
<li>显示到图片上</li>
</ul>


<h4>第一步</h4>

<p>从相册中选取一张照片：</p>

<pre><code class="java">    private void readPictureFromAlbum() {

        Intent i = new Intent(Intent.ACTION_PICK,
        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(i, ALBUM_REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode,int resultCode,Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == ALBUM_REQUEST_CODE &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
            Cursor cursor = getContentResolver().query(selectedImage,
            filePathColumn, null, null, null);
            cursor.moveToFirst();
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();

            Log.v("picturePath: ", picturePath + "");

            BitmapFactory.Options options = new BitmapFactory.Options();

            options.inJustDecodeBounds = true;

            Bitmap bm = BitmapFactory.decodeFile(picturePath, options);

            options.inSampleSize = options.outWidth / 400;

            options.inJustDecodeBounds = false;

            myBitMap = BitmapFactory.decodeFile(picturePath, options);

            Log.v("Size: ", options.inSampleSize + " " + options.outHeight + " " + options.outWidth);

            imageView.setImageBitmap(myBitMap);

            findMyFace();
        }
    }
</code></pre>

<p>在这个地方为了方便后面找到人脸，同时防止内存溢出，节约资源，需要对图像做一些压缩，用到了<code>options.inSampleSize</code>参数。但为了能比较好的显示图片，我们需要根据图片的实际大小来设置<code>options.inSampleSize</code>参数，这里用到了<code>options.inJustDecodeBounds = true</code>来获取一张空的Bitmap，因为用到的是Factory类，在decodeFile之后，optioins对象里面便会包含了这张照片的长和宽，我们拿着这个长和宽来设置<code>options.inSampleSize</code></p>

<h4>第二步</h4>

<p>进行人脸检测
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">findMyFace</span><span class="o">(){&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Bitmap</span> <span class="n">bm</span> <span class="o">=</span> <span class="n">myBitMap</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">RGB_565</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FaceDetector</span> <span class="n">faceDet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FaceDetector</span><span class="o">(</span><span class="n">bm</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">bm</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span> <span class="n">MAX_FACES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FaceDetector</span><span class="o">.</span><span class="na">Face</span><span class="o">[]</span> <span class="n">faceList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FaceDetector</span><span class="o">.</span><span class="na">Face</span><span class="o">[</span><span class="n">MAX_FACES</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">faceDet</span><span class="o">.</span><span class="na">findFaces</span><span class="o">(</span><span class="n">bm</span><span class="o">,</span> <span class="n">faceList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">faceList</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">FaceDetector</span><span class="o">.</span><span class="na">Face</span> <span class="n">face</span> <span class="o">=</span> <span class="n">faceList</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FaceDet&quot;</span><span class="o">,</span> <span class="s">&quot;Face [&quot;</span><span class="o">+</span><span class="n">face</span><span class="o">+</span><span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">face</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FaceDet&quot;</span><span class="o">,</span> <span class="s">&quot;Face [&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;] - Confidence [&quot;</span><span class="o">+</span><span class="n">face</span><span class="o">.</span><span class="na">confidence</span><span class="o">()+</span><span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;人脸可信度 : &quot;</span> <span class="o">+</span> <span class="n">face</span><span class="o">.</span><span class="na">confidence</span><span class="o">());</span>
</span><span class='line'>        <span class="n">PointF</span> <span class="n">pf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PointF</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//getMidPoint(PointF point);</span>
</span><span class='line'>        <span class="c1">//Sets the position of the mid-point between the eyes.</span>
</span><span class='line'>        <span class="n">face</span><span class="o">.</span><span class="na">getMidPoint</span><span class="o">(</span><span class="n">pf</span><span class="o">);</span>
</span><span class='line'>        <span class="n">RectF</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RectF</span><span class="o">();</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">pf</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">face</span><span class="o">.</span><span class="na">eyesDistance</span><span class="o">()*</span><span class="mf">1.4</span><span class="o">);</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">pf</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="n">face</span><span class="o">.</span><span class="na">eyesDistance</span><span class="o">()*</span><span class="mf">1.4</span><span class="o">);</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">top</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">pf</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">face</span><span class="o">.</span><span class="na">eyesDistance</span><span class="o">()*</span><span class="mf">1.6</span><span class="o">);</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">bottom</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">pf</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="n">face</span><span class="o">.</span><span class="na">eyesDistance</span><span class="o">()*</span><span class="mf">1.7</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">imageView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ll</span><span class="o">.</span><span class="na">removeAllViews</span><span class="o">();</span>
</span><span class='line'>        <span class="n">FaceView</span> <span class="n">fv</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FaceView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">myBitMap</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="n">fv</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ll</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">fv</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;没有识别到人脸&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="err">####</span> <span class="n">显示到图片上</span>
</span><span class='line'>
</span><span class='line'><span class="n">这里我们自己继承了一个View来把矩形画到图片里面</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">FaceView</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="n">RectF</span> <span class="n">rectF</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">FaceView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">RectF</span> <span class="n">rectF</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">bitmap</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">rectF</span> <span class="o">=</span> <span class="n">rectF</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Paint</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="n">rectF</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">]]&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;![</span><span class="n">CDATA</span><span class="o">[</span><span class="n">Android客户端接收来自Faye的消息推送</span><span class="o">]]&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://gonjay.github.io/blog/2014/03/03/android-receive-message-from-ruby-china-org/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">03</span><span class="nl">T21:</span><span class="mi">53</span><span class="o">:</span><span class="mi">50</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//gonjay.github.io/blog/2014/03/03/android-receive-message-from-ruby-china-org&lt;/id&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;![</span><span class="n">CDATA</span><span class="o">[&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">基本原理</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">先看了railscasts的</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://railscasts.com/episodes/260-messaging-with-faye&quot;</span><span class="o">&gt;</span><span class="mi">260</span> <span class="n">Messaging</span> <span class="n">with</span> <span class="n">Faye</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="n">部分</span><span class="err">，</span><span class="n">了解Faye的基本原理</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">按照其教程发现有一个关于thin的bug</span><span class="err">，</span><span class="n">谷歌之解决</span><span class="err">，</span><span class="n">后来发现rubychina应该也是遇到过类似的问题</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">解决的方法是加上</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">Faye:</span><span class="o">:</span><span class="n">WebSocket</span><span class="o">.</span><span class="na">load_adapter</span><span class="o">(</span><span class="err">&#39;</span><span class="n">thin</span><span class="err">&#39;</span><span class="o">)&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ruby</span>
</span><span class='line'><span class="n">require</span> <span class="err">&#39;</span><span class="n">faye</span><span class="err">&#39;</span>
</span><span class='line'><span class="nl">Faye:</span><span class="o">:</span><span class="n">WebSocket</span><span class="o">.</span><span class="na">load_adapter</span><span class="o">(</span><span class="err">&#39;</span><span class="n">thin</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">faye_server</span> <span class="o">=</span> <span class="nl">Faye:</span><span class="o">:</span><span class="n">RackAdapter</span><span class="o">.</span><span class="na">new</span><span class="o">(:</span><span class="n">mount</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">faye</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">:</span><span class="n">timeout</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">45</span><span class="o">)</span>
</span><span class='line'><span class="n">run</span> <span class="n">faye_server</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">当然</span><span class="err">，</span><span class="n">理论上来说</span><span class="err">，</span><span class="n">Faye是支持各种web服务器的</span><span class="err">，</span><span class="n">这个地方因为和Rails比较紧密所以选用Faye</span><span class="err">，</span><span class="n">如果考虑到更高的并发的话</span><span class="err">，</span><span class="n">选择Node</span><span class="o">.</span><span class="na">js来跑也是不错的</span><span class="err">，</span><span class="n">faye也是有Node的版本的</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">实现</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">在实现了web端之后</span><span class="err">，</span><span class="n">就考虑到移植到安卓客户端</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">谷歌android</span> <span class="n">faye</span><span class="err">，</span><span class="n">发现有人已经做了一个安卓端的fayeclient</span><span class="err">，</span><span class="n">根据websocket的协议来</span><span class="err">，</span><span class="n">实现一个并不困难</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">对比faye客户端的js代码</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">javascript</span>
</span><span class='line'><span class="nf">$</span><span class="o">(</span><span class="n">function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">faye</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Faye</span><span class="o">.</span><span class="na">Client</span><span class="o">(</span><span class="err">&#39;</span><span class="nl">http:</span><span class="c1">//localhost:9292/faye&#39;);</span>
</span><span class='line'>  <span class="n">faye</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="err">&#39;</span><span class="o">/</span><span class="n">messages</span><span class="o">/</span><span class="k">new</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">function</span> <span class="o">(</span><span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">alert</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">和</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/saulpower/Android-Faye-Client&quot;</span><span class="o">&gt;</span><span class="n">Android</span><span class="o">-</span><span class="n">Faye</span><span class="o">-</span><span class="n">Client</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="n">的java代码</span>
</span></code></pre></td></tr></table></div></figure> java
URI uri = URI.create(String.format(&ldquo;ws://%s:443/events&rdquo;, baseUrl));
String channel = String.format(&ldquo;/%s/**&rdquo;, User.getCurrentUser().getUserId());</p>

<p>mClient = new FayeClient(uri, channel);
mClient.setFayeListener(this);
mClient.connectToServer(null);
&#8220;`  <br/>
我们就知道大概了如何实现了，需要指出的是，js客户端直接用的http协议，而我们在java这边需要用的是ws协议(也即WebSocket，wss类似https，是ws的安全加强版)</p>

<p>如果你使用的是Android Studio，在你的<code>build.gradle</code>里面添加如下依赖即可:</p>

<pre><code>dependencies {
    compile 'com.saulpower.fayeclient:library:1.0'
}
</code></pre>

<p>因为这个应用是基于Ruby-China做得的，端口号可以查看<a href="view-source:http://ruby-china.org/">RubyChina首页</a>的源代码获取。而channel号也在首页源代码中可见，用的一个temp_access_token，这个token是专门用来做faye的channel号的，通过第一个版本的api可以获取到这个token。
<code>html
    &lt;script type="text/javascript" data-turbolinks-eval=false&gt;
      ROOT_URL = "http://ruby-china.org/";
      ASSET_URL = "http://l.ruby-china.org/";
      FAYE_SERVER_URL = "http://ruby-china.org:8080/faye";
        CURRENT_USER_ACCESS_TOKEN = "72a47853462c91db8f7ed8d3d8899d00";
      if (FAYE_SERVER_URL) {
        App.initNotificationSubscribe();
      }
    &lt;/script&gt;
</code>
在<a href="https://github.com/gonjay/rubychina4android">RubyChina4Android</a>中，用户登录的时候会获取一遍temp_access_token，并注册Serveice。接下来，如果有人在论坛里面@你，应该就能在手机上收到消息推送了。</p>

<h2>Source Code</h2>

<p>以上所有的代码都可以在<a href="https://github.com/gonjay/rubychina4android">RubyChina4Android</a>里面找到</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Sutio 使用指南--像Gemfile一样使用gradle]]></title>
    <link href="http://gonjay.github.io/blog/2014/02/19/android-sutio-shi-yong-zhi-nan/"/>
    <updated>2014-02-19T00:04:26+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/02/19/android-sutio-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<h1>像Gemfile一样使用gradle</h1>

<p>随着项目越来越大，为了更多特性，我们不得不使用越来越多的开源库。按照Eclipse等传统的方式，我们一般会这样做：</p>

<ol>
<li>下载jar包，并添加到项目的build path里面</li>
<li>下载library，将整个文件夹导入到workspace里面，然后在自己的项目里面添加依赖</li>
</ol>


<p>这种方式很有效，但你可以搜索一下Ruby的gem，node.js的npm，iOS的cocoapods，还有过去java项目中的maven依赖。</p>

<p>对比你就发现了，原来这些包管理工具让使用者都不用自己从网上下载，Android依赖管理不是那么优秀，于是Google在最新的Android开发工具便使用gradle来管理项目。那么想比起传统的maven，gradle有哪些优势呢？</p>

<h3>选择Gradle的五个优势</h3>

<ol>
<li>已经被证明能够处理大型的项目规模&ndash;LinkedIn, Netflix, Orbitz这些大公司都使用它来管理项目</li>
<li>gradle提供了对于多语言、多平台最自然的处理方式&ndash;Scala, Groovy, C/C++这些项目都能用gradle来管理</li>
<li>gradle专注build效率</li>
<li>gradle的发布周期很短</li>
<li>社区支持很棒</li>
</ol>


<p><a href="http://www.gradleware.com/resources/tech/java/maven">链接</a></p>

<h3>如何引用Maven？</h3>

<p>之前我们是这样引用</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.nhaarman.listviewanimations&lt;/groupId&gt;
    &lt;artifactId&gt;library&lt;/artifactId&gt;
    &lt;version&gt;2.5.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>现在我们是这样</p>

<pre><code>repositories {
    mavenCentral()
}

dependencies{
    compile 'com.nhaarman.listviewanimations:library:2.5.2'
}
</code></pre>

<p>你看最新的依赖管理方式让你再也不用去github上面下载jar包了或者导入整个library</p>
]]></content>
  </entry>
  
</feed>
