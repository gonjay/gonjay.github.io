<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocos2d-x | 博客]]></title>
  <link href="http://gonjay.github.io/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://gonjay.github.io/"/>
  <updated>2014-11-18T23:04:08+08:00</updated>
  <id>http://gonjay.github.io/</id>
  <author>
    <name><![CDATA[GonJay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start Cocos2d With Lua]]></title>
    <link href="http://gonjay.github.io/blog/2014/03/25/start-cocos2d-with-lua/"/>
    <updated>2014-03-25T15:02:55+08:00</updated>
    <id>http://gonjay.github.io/blog/2014/03/25/start-cocos2d-with-lua</id>
    <content type="html"><![CDATA[<h2>quick-cocos2d-x</h2>

<h2>tip</h2>

<p>cocos游戏开发的流程是先采用Lua或者JS，把整个游戏实现出来，然后利用相应的工具去打包成不同平台下的项目，比如打包Android平台或者iOS平台的项目，然后利用相应平台的工具编译成apk或者ipa文件。</p>

<p>这也就意味着，对于一个利用cocos开发的游戏要接入我们的SDK，我们应该不会去开发针对Lua或者JS的单独SDK，而是给出一个指导，即当游戏开发商生成了一个Android项目或者iOS项目之后，应该怎样接入我们的平台。这就涉及到Lua调用Java，Java调用Lua，又或者Objective-C调用Lua或者Lua调用Objective-C了，剩下的事情，就是纯粹SDK的一些操作。</p>

<p>接下来尝试，将一个html5的cocos打包生成一个Android项目，尝试用js去调用java以及java调用js</p>
]]></content>
  </entry>
  
</feed>
